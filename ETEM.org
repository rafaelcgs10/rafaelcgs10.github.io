#+TITLE: Este Título está Mentindo!
#+AUTHOR: Rafael Castro
#+EMAIL: rafaelcgs10@gmail.com
#+startup: beamer
#+LaTeX_CLASS: beamer
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css"/>
#+LATEX_HEADER: \usepackage{graphicx, hyperref, udesc, url}
#+OPTIONS:   H:2 toc:nil org-export-with-date:nil
#+REVEAL_TRANS: linear
#+REVEAL_THEME: beige
#+REVEAL_SLIDE_HEADER:
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_MAX_SCALE: 1.0
#+ATTR_REVEAL: :frag frag-style
#+REVEAL_MARGIN: 0.0
#+DATE: 14/05/2018


* Cantor
** O Pai da Teoria dos Conjuntos
*** Georg Cantor
  [[file:./ETEM/cantor.jpeg]]

** Cardinalidade de Conjutos  
*** Conjunto de todos os números pares: \(0, 2, 4, 6, 8, 10... \)
*** Conjunto de todos os números naturais: \(0, 1, 2, 3, 4, 5... \)
    
  *Há mais números naturais do que pares?*

** Naturais vs Reais
*** Todos os números naturais: \(0, 1, 2, 3, 4, 5... \)
*** Todos os números reais entre 0.0 e 1.0. Segmento de reta continuo de tamanho 1.
*** Ambos tem infitos números.
*** Se ambos tem o mesmo número de elementos, então há uma correspodência de 1 para 1.

** Argumento da Diagonalização de Cantor
*** Por facilidade, vamos representar os números do segumento de reta em base binária.
    
   #+attr_html: :height 400
  [[file:./ETEM/diagonal.png]]

* Russel
** O Pai da Teoria dos Tipos
*** Bertrand Russell
  #+attr_html: :height 400
  [[file:./ETEM/russel.png]]
** O Paradoxo de Russel
   \[ M = \{A | A \not \in A\} \]
*** M contém a si mesmo?
*** Se sim, então pela deveria ser pela sua própria definição.
*** Se não, então deveria pela sua própria definição.

* Hilbert
** O Último Matemático Universal
  #+attr_html: :height 400
  [[file:./ETEM/hilbert.jpg]]

** O Programa de Hilbert

*** Todos esses paradoxos levaram a matemática para uma crise de fundamentos.
*** O Programa de Hilbert tinha como objetivo criar uma fundação sólida (consistente) a qual todo a matemática iria se apoaiar:
    1. A matemática deve ser toda escrita de uma linguagem formal, sem ambiguidade.
    2. Completa: toda as verdades matemáticas podem ser provadas nesse formalismo.
    3. Consistente: não deve ser posssível provar uma contradição nesse formalismo, por exemplo \(0 = 1\).
    4. Decidível: há um algoritmo que decide se uma proposição é verdadeira ou falsa.
  
* Gödel
** O Melhor amigo de Albert Einstein
  #+attr_html: :height 400
  [[file:./ETEM/godel.jpg]]
 
** O Teorema da Incompletude de Gödel
*** Qualquer formalização da matemática com poder suficiente realizar aritmética básica é incompleta.
*** Codificação numérica (enumeração) para todas as fórmulas da matemática (em seu sistema).
**** Uma proposição somente é demonstrável se a sua codificação for divisivel pelas codificações das regras do sistema.
*** A prova consiste em mostrar a existência de uma proposição \(G\) que é verdade se, e somente se, não for possível prova-la.
*** \( G \) é uma proposição que fala sobre si mesma, algo similar ao paradoxo do mentiroso:

** A Proposição \(G\)
   *Esta afirmação é falsa.*
**** Se a frase é verdadeira, então é falsa.
**** Se a frase é falsa, então deveria ser verdadeira.

*** Há uma lacuna entre verdades e provas.
*** Isso é um resultado muito preocupante, pois diz que há coisas verdadeiras que talvez jamais podemos provar.
*** Não seria ao menos possível um procedimento que decida todas as proposições que podem ser provadas?
    
* Turing
** O Pai da Ciência da Computação
  #+attr_html: :height 400
  [[file:./ETEM/turing.jpg]]
  
** Indecibilidade do Problema da Decisão (Parada)

*** Programas, assim como fórmulas matemáticas, podem ser representadas como números. São enumeráveis.

*** O problema da decisão pede um procedimento (programa) que decida se um dada proposição é verdadeira ou falsa.

*** Turing criou o conceito de uma máquina abstrata: um humano com papel e caneta fazendo computações/contas/provas.

*** A ideia é mostrar que *não existe* máquina abstrata que decida se uma outra máquina para com uma dada entrada.
   
** Prova da Indecibilidade do Problema da Parada por Diagonalização

*** Máquinas de Turing são programas que podem receber entradas.
*** A máquina decisora se chama \(h\).
*** O objetivo é mostrar que não há máquina \(h\).
*** Programas e entradas são apenas números naturais.

([H(p, e) = 1 \) se \(p\) para com a entrada \(e\)

([H(p, e) = 0 \) caso contrário

| h(i, j) |  M1 |  M2 |  M3 |  M4 | ... |
|---------+-----+-----+-----+-----+-----|
| M1      | *1* |   0 |   1 |   0 | ... |
| M2      |   0 | *0* |   1 |   1 | ... |
| M3      |   1 |   1 | *1* |   0 | ... |
| M4      |   0 |   1 |   1 | *1* | ... |
| ...     | ... | ... | ... | ... | ... |

| H(i, i) |  *1*| *0* | *1* | *1* | ... |

D(p) = 1  se H(p, p) = 0

D(p) = 0  se H(p, p) = 1

|   | M1 | M2 | M3 | M4 | ... |
|---+----+----+----+----+-----|
| D |  0 |  1 |  0 |  0 | ... |

** Alimentando o Demônio com o Demônio

|   | M1 | M2 | M3 | M4 | ... | D | ... |
|---+----+----+----+----+-----+---+-----|
| D |  0 |  1 |  0 |  0 | ... | 1 | ... |

| h(i, j) | <M1> | <M2> | <M3> | <M4> | ... | D | ... |
|---------+------+------+------+------+-----+---+-----|
| M1      |  *1* |    0 |    1 |    0 | ... | 1 | ... |
| M2      |    0 |  *0* |    1 |    1 | ... | 0 | ... |
| M3      |    1 |    1 |  *1* |    0 | ... | 1 | ... |
| M4      |    0 |    1 |    1 |  *1* | ... | 1 | ... |
| ...     |  ... |  ... |  ... |  ... | ... | 0 | ... |
| D       |    0 |    1 |    0 |    0 | ... | 0 | ... |

H permitiu criar uma contradição, então H não existe.
